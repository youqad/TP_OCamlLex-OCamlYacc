type token =
  | EOF
  | VAR of (string)
  | STRING of (string)
  | INT of (int)
  | BIN_MULT of (string)
  | PLUS of (string)
  | MINUS of (string)
  | BIN_CMP of (string)
  | NOT
  | AND
  | OR
  | MMINUS
  | LET
  | EQUALS
  | IN
  | CASE
  | OF
  | PIPE
  | GIVES
  | LPAR
  | RPAR

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"
    open Expr
# 29 "parse.ml"
let yytransl_const = [|
    0 (* EOF *);
  264 (* NOT *);
  265 (* AND *);
  266 (* OR *);
  267 (* MMINUS *);
  268 (* LET *);
  269 (* EQUALS *);
  270 (* IN *);
  271 (* CASE *);
  272 (* OF *);
  273 (* PIPE *);
  274 (* GIVES *);
  275 (* LPAR *);
  276 (* RPAR *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* STRING *);
  259 (* INT *);
  260 (* BIN_MULT *);
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* BIN_CMP *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\004\000\
\004\000\005\000\006\000\006\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\004\000\006\000\003\000\003\000\
\002\000\003\000\003\000\003\000\003\000\003\000\002\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\022\000\021\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\002\000\009\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\020\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000"

let yydgoto = "\002\000\
\011\000\012\000\013\000\040\000\041\000\042\000"

let yysindex = "\002\000\
\025\255\000\000\000\000\000\000\000\000\025\255\025\255\001\255\
\025\255\025\255\000\000\104\000\000\000\000\000\111\255\249\254\
\060\255\042\255\000\000\025\255\025\255\025\255\025\255\025\255\
\025\255\025\255\025\255\008\255\000\000\000\000\026\255\026\255\
\009\255\111\255\101\255\009\255\079\255\000\000\000\000\251\254\
\000\000\011\255\025\255\008\255\025\255\090\255\000\000\090\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\017\000\
\042\000\072\000\077\000\054\000\000\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\082\000\000\000\087\000"

let yygindex = "\000\000\
\000\000\254\255\228\255\000\000\244\255\000\000"

let yytablesize = 373
let yytable = "\039\000\
\007\000\016\000\001\000\014\000\015\000\027\000\017\000\018\000\
\038\000\004\000\005\000\044\000\020\000\021\000\022\000\039\000\
\008\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\003\000\004\000\005\000\045\000\020\000\006\000\047\000\
\007\000\005\000\000\000\000\000\008\000\000\000\000\000\009\000\
\046\000\011\000\048\000\010\000\000\000\020\000\021\000\022\000\
\023\000\000\000\024\000\025\000\000\000\012\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\015\000\020\000\
\021\000\022\000\023\000\000\000\024\000\025\000\000\000\013\000\
\026\000\000\000\000\000\028\000\014\000\000\000\000\000\000\000\
\000\000\006\000\020\000\021\000\022\000\023\000\018\000\024\000\
\025\000\000\000\000\000\026\000\043\000\020\000\021\000\022\000\
\023\000\000\000\024\000\025\000\000\000\000\000\026\000\019\000\
\020\000\021\000\022\000\023\000\000\000\024\000\000\000\000\000\
\000\000\026\000\020\000\021\000\022\000\023\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\007\000\007\000\
\000\000\007\000\007\000\000\000\000\000\007\000\007\000\000\000\
\007\000\007\000\000\000\000\000\007\000\008\000\008\000\008\000\
\000\000\008\000\008\000\000\000\000\000\008\000\008\000\000\000\
\008\000\008\000\000\000\000\000\008\000\005\000\005\000\005\000\
\005\000\000\000\005\000\005\000\000\000\000\000\005\000\005\000\
\011\000\005\000\011\000\011\000\000\000\005\000\011\000\011\000\
\000\000\011\000\011\000\000\000\012\000\011\000\012\000\012\000\
\000\000\000\000\012\000\012\000\000\000\012\000\012\000\015\000\
\015\000\012\000\000\000\000\000\015\000\000\000\015\000\015\000\
\013\000\013\000\015\000\000\000\000\000\013\000\014\000\013\000\
\013\000\000\000\014\000\013\000\014\000\014\000\000\000\006\000\
\014\000\006\000\006\000\000\000\018\000\006\000\018\000\018\000\
\000\000\000\000\018\000\020\000\021\000\022\000\023\000\000\000\
\024\000\025\000\000\000\000\000\026\000"

let yycheck = "\028\000\
\000\000\001\001\001\000\006\000\007\000\013\001\009\000\010\000\
\001\001\002\001\003\001\017\001\004\001\005\001\006\001\044\000\
\000\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\001\001\002\001\003\001\018\001\004\001\006\001\044\000\
\008\001\000\000\255\255\255\255\012\001\255\255\255\255\015\001\
\043\000\000\000\045\000\019\001\255\255\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\255\255\000\000\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\000\000\004\001\
\005\001\006\001\007\001\255\255\009\001\010\001\255\255\000\000\
\013\001\255\255\255\255\016\001\000\000\255\255\255\255\255\255\
\255\255\000\000\004\001\005\001\006\001\007\001\000\000\009\001\
\010\001\255\255\255\255\013\001\014\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\255\255\255\255\013\001\000\000\
\004\001\005\001\006\001\007\001\255\255\009\001\255\255\255\255\
\255\255\013\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\255\255\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\020\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\255\255\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\020\001\004\001\005\001\006\001\
\007\001\255\255\009\001\010\001\255\255\255\255\013\001\014\001\
\007\001\016\001\009\001\010\001\255\255\020\001\013\001\014\001\
\255\255\016\001\017\001\255\255\007\001\020\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\016\001\017\001\009\001\
\010\001\020\001\255\255\255\255\014\001\255\255\016\001\017\001\
\009\001\010\001\020\001\255\255\255\255\014\001\010\001\016\001\
\017\001\255\255\014\001\020\001\016\001\017\001\255\255\014\001\
\020\001\016\001\017\001\255\255\014\001\020\001\016\001\017\001\
\255\255\255\255\020\001\004\001\005\001\006\001\007\001\255\255\
\009\001\010\001\255\255\255\255\013\001"

let yynames_const = "\
  EOF\000\
  NOT\000\
  AND\000\
  OR\000\
  MMINUS\000\
  LET\000\
  EQUALS\000\
  IN\000\
  CASE\000\
  OF\000\
  PIPE\000\
  GIVES\000\
  LPAR\000\
  RPAR\000\
  "

let yynames_block = "\
  VAR\000\
  STRING\000\
  INT\000\
  BIN_MULT\000\
  PLUS\000\
  MINUS\000\
  BIN_CMP\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "parse.mly"
             ( _1 )
# 230 "parse.ml"
               : Expr.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 52 "parse.mly"
                                   ( _1 )
# 237 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parse.mly"
                                   ( Var _1 )
# 244 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parse.mly"
                                   ( _2 )
# 251 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pmatch) in
    Obj.repr(
# 55 "parse.mly"
                                   ( Case (_2,List.rev _4) )
# 259 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parse.mly"
                                   ( Let (_2,_4,_6) )
# 268 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parse.mly"
                                   ( match (_1, _3) with
                                     | (Int n, Int m) -> Int (n+m)
                                     | _ -> App ("+",[_1;_3]) )
# 279 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parse.mly"
                                   ( match (_1, _3) with
                                     | (Int n, Int m) -> Int (n-m)
                                     | _ -> App ("-",[_1;_3]) )
# 290 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parse.mly"
                                   ( match _2 with
                                     | Int n -> Int (-n)
                                     | _ -> App ("-",[_2]) )
# 300 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parse.mly"
                                   ( let op_list = ["*", ( * ); "/", (/); "%", (mod)] in
                                     match (_1, _3) with
                                     | (Int n, Int m) when (try
                                                              let _ = List.assoc _2 op_list in
                                                              true
                                                            with Not_found -> false)
                                       -> let op = List.assoc _2 op_list in
                                          Int (op n m)
                                     | (Int n, Int m) when _2="/" -> Int (n/m)
                                     | (Int n, Int m) when _2="%" -> Int (n mod m)
                                     | _ -> App (_2,[_1;_3]) )
# 319 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parse.mly"
                                   ( App (_2,[_1;_3]) )
# 328 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parse.mly"
                                   ( App ("=",[_1;_3]) )
# 336 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parse.mly"
                                   ( App ("and",[_1;_3]) )
# 344 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parse.mly"
                                   ( App ("or",[_1;_3]) )
# 352 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parse.mly"
                                   ( App ("not",[_2]) )
# 359 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prule) in
    Obj.repr(
# 85 "parse.mly"
                                   ( [_1] )
# 366 "parse.ml"
               : 'pmatch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pmatch) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prule) in
    Obj.repr(
# 86 "parse.mly"
                                   ( _3::_1 )
# 374 "parse.ml"
               : 'pmatch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parse.mly"
                                   ( (_1,_3) )
# 382 "parse.ml"
               : 'prule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parse.mly"
                                   ( if _1="_" then Any else Var _1 )
# 389 "parse.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 93 "parse.mly"
                                   ( _1 )
# 396 "parse.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parse.mly"
                                   ( Int _1 )
# 403 "parse.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parse.mly"
                                   ( String _1 )
# 410 "parse.ml"
               : 'const))
(* Entry terminated_expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let terminated_expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.t)
